log_in:
    URL: https://jwfjuifdunib5gmornhrs4nm4a0pitnm.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: Expecting an 'email' and 'password' field (JSON)
    response:
        IF (token is correct, login incorrect [NO USER]):
            = {"ERROR" : "No user found"}
        IF (token is correct, login incorrect [BAD PASSWORD]):
            = {'token_success' : true, 'login_success' : false, user_data : {attempts : }}
        IF (token is correct, login correct):
            = {'token_success' : true, 'login_success' : true, 'user_data' : {email : , name : , groups : , settings : }}
        IF (token is incorrect):
            = {'token_success' : false, 'login_success' : false}

sign_up:
    URL: https://rdsn74oehsmrcoc2spf6aiw4iy0hqcbv.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: expecting an 'email', 'password' and 'name' field (JSON)
    IF (token is correct, email available):
        = {'token_success' : true, 'signup_success' : true}
    IF (token is correct, email unavailable):
        = {'token_success' : true, 'signup_success' : false}
    IF (token is incorrect):
        = {'token_success' : false}

change_settings:
    change_settings:
    URL: https://yimbhwmzyzeikdbjqylkdonwoy0czhwq.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
                email: string
                name?: string
                password?: string
                notification?: "both" | "only billmates" | "only email"
             }
    response payload:
    IF (token is correct, email correct):
        = {'token_success' : true, 'change_success' : true}
    IF (token is correct, email incorrect):
        = {'token_success' : true, 'change_success' : false}
    IF (token is incorrect):
        = {'token_success' : false}

new_expense:
    URL: https://osggc3wtegomn5yliv5heqkpji0ohbfk.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: 'title' (string), 'group_id' (int), 'expense' (dict), 'total' (double) fields (JSON)
    expense dict contains user email strings as keys and amount owed doubles as values. All values positive,
    owner is email of person owed total
    IF (token is incorrect):
        = {'token_success' : false}
    ELSE :
        IF (expense totals don't add up or one or more are negative or one or more users not in specified group):
            = {'token_success' : true, 'submit_success' = false}
        ELSE :
            = {'token_success' : true, 'submit_success' = true}

make_group:
    URL: https://wwr7yimislgmw7f5crxlnqmxxq0prart.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: 'manager' (string), 'name' (string) - Manager is the person who created it (email) and name is the name of the group.
    IF (token is incorrect):
        = {'token_success' : false}
    ELSE :
        IF (group exists):
            = {"token_success" : true, "make_group_success": false}
        ELSE IF (payload doesn't have the correct fields) :
            = {"ERROR" : "Malformed Body"}
        ELSE IF (fields are correct, group is made):
            = {"token_success" : true, "make_group_success": true}

group_add:
    URL: https://cxt3kig2ocrigm3mvzm7ql3m6u0plfwd.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: 'email' (string), 'uuid' (string) - Email is the email of the user who wants to join, and uuid is the uuid (link val) of the group.
    IF (token is incorrect):
        = {'token_success' : false}
    ELSE :
        IF (group does not exist):
            = {"ERROR" : "No such group"}
        ELSE IF (user already in group) :
            = {"token_success" : true, "group_add_success": false}
        ELSE IF (user not in group, user is added in database):
            = {"token_success" : true, "group_add_success": true}

pay_expense:
    URL: https://q6dj43wfjfvztvxbhdyqogvn2y0gfcro.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: 'email' (string), 'expense_id' (string), 'amount' (double)
    IF (token is incorrect):
        = {'token_success' : false}
    ELSE :
        IF (amount exceeds users debt on that expense):
            = {"token_success" : true, "pay_success": false}
        ELSE:
            = {"token_success" : true, "pay_success": true}

handle_pending_payment:
    URL: https://jfynig6bitelqawn2z4pv7rg440wnwjw.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: 'accepted' (boolean), 'expense_id' (string)
    accepted is true is payment accepted, false otherwise
    expense_id is id of original expense, not of handle_pending_payment
    IF (token is incorrect):
        = {'token_success' : false}
    ELSE :
        IF (there is no pending_payment with given expense_id):
            = {"token_success" : true, "handle_success": false}
        ELSE:
            = {"token_success" : true, "handle_success": true}

get_notification:
    URL: https://gzduqcygvszdpcegs76a6crbna0ujgmf.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
                object_id: string
             }
    IF (token is incorrect):
        = {'token_success' : false}
    IF (token is correct, object_id is invalid):
        = {'token_success' : true, 'notification' : null}
    IF (token is correct, object_id is valid)
        = {'token_success' : true, 'notification' : {
                    id: string
                    sender: string
                    message: string
                    time: TimeString
                    isread: boolean
           }}

delete_notification:
    URL: https://jqzztp2tci2reghy5gkp5wlrsm0oqspd.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
                object_id: string
             }
    IF (token is incorrect):
        = {'token_success' : false}
    IF (token is correct, object_id is invalid):
        = {'token_success' : true, 'delete_success' : false}
    IF (token is correct, object_id is valid)
        = {'token_success' : true, 'delete_success' : true}

delete_group:
    URL: https://zp6hyrzgyuocojaqm6ahxc5wxm0rjujf.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
        group_id: string
    }
    IF (token is incorrect):
        = {'token_success' : false}
    IF (token is correct, group_id is invalid):
        = {'token_success' : true, 'delete_success' : false}
    IF (token is correct, group_id is valid)
        = {'token_success' : true, 'delete_success' : true}

get_all_notifications:
    URL: https://e2fuerxz7hkbeafwy73tltsijm0cvrlz.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
        email: string
    }
    IF (token is incorrect):
        = {'token_success' : false}
    IF (token is correct, email is invalid):
        = {'ERROR' :'No email found'}
    IF (token is correct, group_id is valid)
        = {'token_success' : true, 'notifications' : {}}