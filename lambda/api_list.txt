log_in:
    URL: https://jwfjuifdunib5gmornhrs4nm4a0pitnm.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: Expecting an 'email' and 'password' field (JSON)
    response:
        IF (token is correct, login incorrect [NO USER]):
            = {"ERROR" : "No user found"}
        IF (token is correct, login incorrect [BAD PASSWORD]):
            = {'token_success' : true, 'login_success' : false, user_data : {attempts : }}
        IF (token is correct, login correct):
            = {'token_success' : true, 'login_success' : true, 'user_data' : {email : , name : , groups : , settings : }}
        IF (token is incorrect):
            = {'token_success' : false, 'login_success' : false}

sign_up:
    URL: https://rdsn74oehsmrcoc2spf6aiw4iy0hqcbv.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: expecting an 'email', 'password' and 'name' field (JSON)
    IF (token is correct, email available):
        = {'token_success' : true, 'signup_success' : true}
    IF (token is correct, email unavailable):
        = {'token_success' : true, 'signup_success' : false}
    IF (token is incorrect):
        = {'token_success' : false}

change_settings:
    URL: https://yimbhwmzyzeikdbjqylkdonwoy0czhwq.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
                email: string
                notification?: "both" | "only billmates" | "only email"
             }
    response paylaood:
    IF (token is correct, email correct):
        = {'token_success' : true, 'change_success' : true}
    IF (token is correct, email incorrect):
        = {'token_success' : true, 'change_success' : false}
    IF (token is incorrect):
        = {'token_success' : false}

new_expense:
    URL: https://osggc3wtegomn5yliv5heqkpji0ohbfk.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: 'title' (string), 'group_id' (int), 'expense' (dict), 'total' (double), 'comment' (string) fields (JSON)
    expense dict contains user email strings as keys and amount owed doubles as values. All values positive,
    owner is email of person owed total
    IF (token is incorrect):
        = {'token_success' : false}
    ELSE :
        IF (expense totals don't add up or one or more are negative or one or more users not in specified group):
            = {'token_success' : true, 'submit_success' = false}
        ELSE :
            = {'token_success' : true, 'submit_success' = true}

make_group:
    URL: https://wwr7yimislgmw7f5crxlnqmxxq0prart.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: 'manager' (string), 'name' (string) - Manager is the person who created it (email) and name is the name of the group.
    IF (token is incorrect):
        = {'token_success' : false}
    ELSE :
        IF (group exists):
            = {"token_success" : true, "make_group_success": false}
        ELSE IF (payload doesn't have the correct fields) :
            = {"ERROR" : "Malformed Body"}
        ELSE IF (fields are correct, group is made):
            = {"token_success" : true, "make_group_success": true}

group_add:
    URL: https://cxt3kig2ocrigm3mvzm7ql3m6u0plfwd.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: 'email' (string), 'uuid' (string) - Email is the email of the user who wants to join, and uuid is the uuid (link val) of the group.
    IF (token is incorrect):
        = {'token_success' : false}
    ELSE :
        IF (group does not exist):
            = {"ERROR" : "No such group"}
        ELSE IF (user already in group) :
            = {"token_success" : true, "group_add_success": false}
        ELSE IF (user not in group, user is added in database):
            = {"token_success" : true, "group_add_success": true}

pay_expense:
    URL: https://q6dj43wfjfvztvxbhdyqogvn2y0gfcro.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: 'email' (string), 'expense_id' (string), 'amount' (double), 'payment_method' (string)
    IF (token is incorrect):
        = {'token_success' : false}
    ELSE :
        IF (expense does not exist):
            = {"token_success" : true, "pay_success": false}
        ELSE:
            = {"token_success" : true, "pay_success": true}

handle_pending_payment:
    URL: https://jfynig6bitelqawn2z4pv7rg440wnwjw.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: 'accepted' (boolean), 'payment_id' (string)
    accepted is true is payment accepted, false otherwise
    payment_id is id of payment, not original expense
    IF (token is incorrect):
        = {'token_success' : false}
    ELSE :
        IF (there is no pending_payment with given expense_id):
            = {"token_success" : true, "handle_success": false}
        ELSE:
            = {"token_success" : true, "handle_success": true}

get_notification:
    URL: https://gzduqcygvszdpcegs76a6crbna0ujgmf.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
                object_id: string
             }
    IF (token is incorrect):
        = {'token_success' : false}
    IF (token is correct, object_id is invalid):
        = {'token_success' : true, 'notification' : null}
    IF (token is correct, object_id is valid)
        = {'token_success' : true, 'notification' : {
                    id: string
                    sender: string
                    message: string
                    time: TimeString
                    isread: boolean
           }}

delete_notification:
    URL: https://jqzztp2tci2reghy5gkp5wlrsm0oqspd.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
                object_id: string
             }
    IF (token is incorrect):
        = {'token_success' : false}
    IF (token is correct, object_id is invalid):
        = {'token_success' : true, 'delete_success' : false}
    IF (token is correct, object_id is valid)
        = {'token_success' : true, 'delete_success' : true}

delete_group:
    URL: https://zp6hyrzgyuocojaqm6ahxc5wxm0rjujf.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
        group_id: string
    }
    IF (token is incorrect):
        = {'token_success' : false}
    IF (token is correct, group_id is invalid):
        = {'token_success' : true, 'delete_success' : false}
    IF (token is correct, group_id is valid)
        = {'token_success' : true, 'delete_success' : true}

get_all_notifications:
    URL: https://e2fuerxz7hkbeafwy73tltsijm0cvrlz.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
        email: string
    }
    IF (token is incorrect):
        = {'token_success' : false}
    IF (token is correct, email is invalid):
        = {'ERROR' :'No email found'}
    IF (token is correct, email is valid)
        = {'token_success' : true, 'notifications' : {}}

get_user:
    URL: https://spdzmxp6xdfjiwptqdabqgcy4q0rmcwt.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
        email: string
    }
    IF (token is incorrect):
        = {'token_success' : false}
    IF (token is correct, email is invalid):
        = {'token_success' : true, 'user' : null}
    IF (token is correct, email is valid)
        = {'token_success' : true, 'user' : {}}

read_notification:
    URL: https://wzqss3razlwkrdnwdm6nr4vx6i0rxnqn.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
        object_id: string
    }
    IF (token is incorrect):
        = {'token_success' : false}
    IF (token is correct, object_id was valid):
        = {'token_success' : true, 'read_success' : true}
    IF (token is correct, object_id is invalid)
        = {'token_success' : true, 'read_success' : false}

delete_user:
    URL: https://s4m26xzazywekzmwbz2jsoikhq0tcfth.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
        email: string
    }
    IF (token is incorrect):
        = {'token_success' : false}
    IF (token is correct, email was verified):
        = {'token_success' : true, 'delete_success' : true}

pay_balance:
    URL: https://ipzfxhr6iinf5lohek6kvva3lu0wirji.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
        email: string
        group_id: string
        total: int // note: should be positive
        expenses: dict {email (string): amount (int)}
    }
    IF (token is incorrect):
        = {'token_success' : false}
    IF (token is correct, total is valid):
        = {'token_success' : true, 'pay_success' : true}

get_venmo_auth:
    URL: https://qol6mrbwipmg6r6ksaili6rbx40kpmhk.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
        email: string
    }
    IF (token is incorrect):
        = {'token_success' : false}
    IF (token is correct, email exists):
        = {'token_success' : true, 'get_success' : true, 'venmo_token': string or null}

contest_expense:
    URL: https://ctxt572a2yvnjttpbcnloz6gem0fhzmo.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
        email: string
        expense_id: 
    }
    IF (token is incorrect):
        = {'token_success' : false}
    IF (token is correct, email and expense exist):
        = {'token_success' : true, 'contest_success' : true}

remove_expense:
    URL: https://2xtgpr37spnenjmrurwm26mel40apwki.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
        expense_id: string
        remove: boolean // true if expense being removed, false if group manager denying voiding
    }
    IF (token is incorrect):
        = {'token_success' : false}
    IF (token is correct, expense exists):
        = {'token_success' : true, 'remove_success' : true}
        
store_venmo_token:
    URL: https://hq56rve3ccdasnkl45tedppqgu0cshgn.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
        email: string
        venmo_token: string
    }
    IF (token is incorrect):
        = {'token_success' : false}
    IF (token is correct, user exists):
        = {'token_success' : true, 'store_success' : true}

get_all_groups:
    URL: https://al53x3tpmf65idl4fujgprneya0ulsfd.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
        email: string
    }
    IF (token is incorrect):
        = {'token_success' : false}
    IF (token is correct, user exists):
        = {'token_success' : true, 'get_success' : true}
        
kick_user:
    URL: https://m2sfilsrw4pe6wsrtrl2z7jwq40yifvd.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
        email: string
        group_id: string
    }
    IF (token is incorrect):
        = {'token_success' : false}
    IF (token is correct, user and group exist):
        = {'token_success' : true, 'delete_success' : true}

reset_group
    URL: https://eewaybcy75ortxfip224qdbmae0wpfjs.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
        group_id: string
    }
    IF (token is incorrect):
        = {'token_success' : false}
    IF (token is correct, group exists):
        = {'token_success' : true, 'reset_success' : true}

change_user_information:
    URL: https://b3s3uiqq5h7gbd7ay3kjhjl2ti0qnrmn.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
                email: string
                name?: string
                newPassword?: string
                oldPassword?: string
             }
    response payload:
    IF (token is correct, email correct):
        = {'token_success' : true, 'change_success' : true}
    IF (token is correct, email incorrect):
        = {'token_success' : true, 'change_success' : false}
    IF (token is incorrect):
        = {'token_success' : false}

change_group_info:
    URL: https://p72cgnfoamqcchthqgqdvzz25q0tnpkr.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
                group_id: string
                fufillment?: string ('both | 'venmo' | 'billmates')
                auto_approve?: boolean
                max_char?: int
             }
    response payload:
    IF (token is correct, group_id correct):
        = {'token_success' : true, 'change_success' : true}
    IF (token is correct, group_id incorrect):
        = {'token_success' : true, 'change_success' : false}
    IF (token is incorrect):
        = {'token_success' : false}
change_group_info:
    URL: https://zy2ttsd3w5vhxsdv5ty6t7e6h40gdcbr.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
                group_id: string
             }
    response payload:
    IF (token is correct, group_id correct):
        = {'token_success' : true, 'group_archive_success' : true}
    IF (token is correct, group_id incorrect):
        = {'token_success' : true, 'group_archive_success' : false}
    IF (token is incorrect):
        = {'token_success' : false}

get_all_shopping_lists :
    URL: https://evu7t6kskxh6wk7tj3cwfw7dyq0tsczh.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
                group_id: string
             }
    response payload:
    IF (token is correct, group_id correct):
        = {'token_success' : true, 'get_success' : true, 'shopping_lists': []}
    IF (token is correct, group_id incorrect):
        = {'token_success' : true, 'get_success' : false, 'shopping_lists': []}
    IF (token is incorrect):
        = {'token_success' : false, 'get_success' : false}

create_new_list :
    URL: https://6dx5inbxxngfwkbmcwzl44tyla0vaoeh.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
                group_id: string
                name: string      
             }
    response payload:
    IF (token is correct, group_id correct, name not already used):
        = {'token_success' : true, 'create_success' : true}
    IF (token is correct, group_id incorrect or name already used):
        = {'token_success' : true, 'get_success' : false}
    IF (token is incorrect):
        = {'token_success' : false, 'get_success' : false}

get_shopping_list :
    URL: https://2ejhbznyhq2cw4gpftd4kot2n40xxvlf.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
                group_id: string
                list_id: string
             }
    response payload:
    IF (token is correct, group_id correct, list_id is correct):
        = {'token_success' : true, 'get_success' : true, 'shopping_list': {}}
    IF (token is correct, group_id incorrect or list_id incorrect):
        = {'token_success' : true, 'get_success' : false}
    IF (token is incorrect):
        = {'token_success' : false, 'get_success' : false}

update_shopping_list :
    URL: https://ce6mzuwdkc7ebhnuxbik42hz5q0xxekz.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
                list_id: string
                item_name: string
                remove_item: boolean (if true: remove item; else: add item)
             }
    response payload:
    IF (token is correct, list_id is correct, item_name not in list, remove_item == false):
        = {'token_success' : true, 'change_success' : true}
    IF (token is correct, list_id is correct, item_name in list, remove_item == true):
        = {'token_success' : true, 'change_success' : true}
    IF (token is correct, list_id is incorrect or (item_name in list, remove_item == false) or (item_name not in list, remove_item == true)):
        = {'token_success' : true, 'change_success' : false}
    IF (token is incorrect):
        = {'token_success' : false, 'change_success' : false}

flip_list_status :
    URL: https://gdmqnuwrzqsja2ps3zc2z2y4km0ejbyu.lambda-url.us-east-2.on.aws/
    headers: {'token' : 'zpdkwA.2_kLU@zg'}
    payload: {
                list_id: string
                isActive: boolean
             }
    response payload:
    IF (token is correct, list_id is correct):
        = {'token_success' : true, 'change_success' : true, 'previous_status': true/false}
    IF (token is correct, list_id is incorrect):
        = {'token_success' : true, 'change_success' : false}
    IF (token is incorrect):
        = {'token_success' : false, 'change_success' : false}